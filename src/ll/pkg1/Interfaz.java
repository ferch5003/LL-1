/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ll.pkg1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ferch5003
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    TablaM tablaM;
    String S;

    public Interfaz() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tituloGram = new javax.swing.JLabel();
        gramOriginal = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Cadena = new javax.swing.JTextField();
        Btn_Verificar = new javax.swing.JButton();
        escogerGram = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        primYSigte = new javax.swing.JLabel();
        gramaticaSV = new javax.swing.JLabel();
        JScrollPanel = new javax.swing.JScrollPane();
        JTablaM = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(60, 60, 62));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 254));
        jLabel1.setText("LL(1)");

        tituloGram.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        tituloGram.setForeground(new java.awt.Color(255, 255, 254));
        tituloGram.setText("Gramatica original");

        gramOriginal.setForeground(new java.awt.Color(255, 255, 254));
        gramOriginal.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 254));
        jLabel2.setText("Cadena a verificar");

        Cadena.setBackground(new java.awt.Color(60, 60, 62));
        Cadena.setForeground(new java.awt.Color(255, 255, 254));
        Cadena.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        Cadena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CadenaActionPerformed(evt);
            }
        });

        Btn_Verificar.setBackground(new java.awt.Color(255, 255, 255));
        Btn_Verificar.setForeground(new java.awt.Color(60, 63, 65));
        Btn_Verificar.setText("Verificar");
        Btn_Verificar.setBorder(new javax.swing.border.MatteBorder(null));
        Btn_Verificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_VerificarActionPerformed(evt);
            }
        });

        escogerGram.setBackground(new java.awt.Color(255, 255, 255));
        escogerGram.setForeground(new java.awt.Color(60, 63, 65));
        escogerGram.setText("Escoger gramatica");
        escogerGram.setBorder(new javax.swing.border.MatteBorder(null));
        escogerGram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escogerGramActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(gramOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jLabel1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(tituloGram)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(escogerGram, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Btn_Verificar, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Cadena, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(16, 16, 16))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addComponent(escogerGram, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(Cadena, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Btn_Verificar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(tituloGram)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gramOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Gramatica sin vicios");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Primeros y Siguientes");

        primYSigte.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        gramaticaSV.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        JScrollPanel.setBackground(new java.awt.Color(255, 255, 255));

        JTablaM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        JScrollPanel.setViewportView(JTablaM);

        JTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pila", "Entrada", "Salida"
            }
        ));
        jScrollPane1.setViewportView(JTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(gramaticaSV, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(primYSigte, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(JScrollPanel)
                    .addComponent(jScrollPane1))
                .addGap(30, 30, 30)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(primYSigte, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                    .addComponent(gramaticaSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void escogerGramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escogerGramActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File archivo = chooser.getSelectedFile();
        DefaultTableModel TableModel = new DefaultTableModel();
        String Header[] = {"Pila", "Entrada", "Salida"};
        TableModel.setColumnIdentifiers(Header);
        JTable.setModel(TableModel);
        try {
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr);
            Gramatica gramatica = new Gramatica(br);
            String textoGramatica = "<html>";
            for (String llave : gramatica.getNoTerminales()) {
                String valor = gramatica.getProducciones().get(llave);
                String[] producciones = valor.split(" ");
                for (String produccion : producciones) {
                    textoGramatica += "<p>" + llave + "->" + produccion + "</p>";
                }
            }
            textoGramatica += "</html>";
            gramOriginal.setText(textoGramatica);
            GSVicio gSVicio = new GSVicio(gramatica);
            S = gSVicio.getnTInicial();
            String textoGramaticaSV = "<html>";
            for (String llave : gSVicio.getNoTerminales()) {
                String valor = gSVicio.getProducciones().get(llave);
                String[] producciones = valor.split(" ");
                for (String produccion : producciones) {
                    textoGramaticaSV += "<p>" + llave + "->" + produccion + "</p>";
                }
            }
            textoGramaticaSV += "</html>";
            gramaticaSV.setText(textoGramaticaSV);
            Primero primeros = new Primero(gSVicio);
            String textoPrimYSigte = "<html>";
            for (String llave : gSVicio.getNoTerminales()) {
                Set<String> conjunto = primeros.getPrimeros().get(llave);
                textoPrimYSigte += "<p>PRIMERO(" + llave + ")=" + conjunto + "</p>";
            }
            Siguiente siguientes = new Siguiente(gSVicio, primeros);
            textoPrimYSigte += "<br/>";
            for (String llave : gSVicio.getNoTerminales()) {
                Set<String> conjunto = siguientes.getSiguientes().get(llave);
                textoPrimYSigte += "<p>SIGUIENTE(" + llave + ")=" + conjunto + "</p>";
            }
            textoPrimYSigte += "</html>";
            primYSigte.setText(textoPrimYSigte);
            tablaM = new TablaM(gSVicio, primeros, siguientes);

            DefaultTableModel modeloTablaM = new DefaultTableModel();
            String[] cabezera = new String[gSVicio.getTerminales().size() + 2];
            cabezera[0] = "No terminal|Terminal";
            int i = 1;
            for (String terminal : gSVicio.getTerminales()) {
                cabezera[i] = terminal;
                i++;
            }
            cabezera[cabezera.length - 1] = "$";
            modeloTablaM.setColumnIdentifiers(cabezera);
            for (String noTerminal : gSVicio.getNoTerminales()) {
                Object[] fila = new Object[gSVicio.getTerminales().size() + 2];
                fila[0] = noTerminal;
                int j = 1;
                for (String terminal : gSVicio.getTerminales()) {
                    fila[j] = tablaM.getTablaM().get(noTerminal).get(terminal);
                    j++;
                }
                fila[fila.length - 1] = tablaM.getTablaM().get(noTerminal).get("$");
                modeloTablaM.addRow(fila);
            }
            JTablaM.setModel(modeloTablaM);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_escogerGramActionPerformed

    private void CadenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CadenaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CadenaActionPerformed

    private void Btn_VerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_VerificarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel TableModel = new DefaultTableModel();
        String Header[] = {"Pila", "Entrada", "Salida"};
        TableModel.setColumnIdentifiers(Header);
        //tablaM.getTablaM().forEach((k, v) -> System.out.println("Key: " + k + ": Value: " + v));
        if (!Cadena.getText().equals("")) {
            String check = Cadena.getText() + "$";
            Stack<String> stack = new Stack<String>();
            stack.push("$");
            stack.push(S);
            String X, a;
            do {
                a = check.charAt(0) + "";
                X = stack.peek();
                //System.out.println("X: " + X + " a: " + a);
                if (esTerminal(X + "") || X.equals('$')) {
                    if (X.equals(a)) {
                        // System.out.println(stack);
                        //System.out.println(check);
                        TableModel.addRow(new Object[]{getStack(stack), check, " "});
                        stack.pop();
                        check = check.substring(1);
                    } else {
                        JOptionPane.showMessageDialog(null, "Error, cadena invalida",
                                "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
                        TableModel = new DefaultTableModel();
                        TableModel.setColumnIdentifiers(Header);
                        break;
                    }
                } else {
                    HashMap<String, String> Hash = tablaM.getTablaM().get(X + "");
                    //System.out.println(Hash);
                    String Prod = Hash.get(a + "");
                    //System.out.println(stack);
                    //System.out.println(check);
                    TableModel.addRow(new Object[]{getStack(stack), check, Prod});
                    //System.out.println(Prod);
                    if (!Prod.equals("")) {
                        String f = Prod.charAt(0) + "";
                        if (f.equals(X) || (f.concat("'").equals(X))) {
                            stack.pop();
                            String p;
                            String h = Prod.charAt(1) + "";
                            if (h.equals("'")) {
                                p = Prod.substring(4);
                            } else {
                                p = Prod.substring(3);
                            }
                            boolean sw = true;
                            if (!p.equals("&")) {
                                for (int i = p.length() - 1; i >= 0; i--) {
                                    String comp = p.charAt(i) + "";
                                    if (comp.equals("'")) {
                                        sw = false;
                                    } else if (sw == false) {
                                        stack.push(p.charAt(i) + "'");
                                        sw = true;
                                    } else {
                                        stack.push(p.charAt(i) + "");
                                    }
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Error, cadena invalida",
                                    "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
                            TableModel = new DefaultTableModel();
                            TableModel.setColumnIdentifiers(Header);
                            break;
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Error, cadena invalida",
                                "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
                        TableModel = new DefaultTableModel();
                        TableModel.setColumnIdentifiers(Header);
                        break;
                    }
                }
            } while (!X.equals("$"));

            JTable.setModel(TableModel);
        }

    }//GEN-LAST:event_Btn_VerificarActionPerformed

    private boolean esTerminal(String cadena) {
        return Pattern.matches("[A-Z]'*", cadena) ? false : true;
    }

    public String getStack(Stack<String> S) {
        Iterator value = S.iterator();
        String m = "";
        while (value.hasNext()) {
            m = m + value.next();
        }
        return m;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Verificar;
    private javax.swing.JTextField Cadena;
    private javax.swing.JScrollPane JScrollPanel;
    private javax.swing.JTable JTablaM;
    private javax.swing.JTable JTable;
    private javax.swing.JButton escogerGram;
    private javax.swing.JLabel gramOriginal;
    private javax.swing.JLabel gramaticaSV;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel primYSigte;
    private javax.swing.JLabel tituloGram;
    // End of variables declaration//GEN-END:variables
}
